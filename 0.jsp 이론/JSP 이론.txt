서블릿 & JSP

1. 환경 설정 :
  1) JDK 설치 및 환경 설정
  2) tomcat 설치 및 환경 설정
   가.환경설정
       tomcat 폴더 안에 bin   ------  실행파일 
                      conf  ------  환경설정
                      wabapps ----  Web Page 올리는 장소
                                    루트 디렉토리(HOME)
       conf -> server.xml 파일 수정
       <Connector URIEncoding="UTF-8" port="8090"
        protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />  

     ** URIEncoding="UTF-8" 추가  => 한글 처리
     ** port="8080" 인데  오라클과 같은 포트를 사용하므로 
        port="8090" 으로 변경 한다.

   나. 실행하기
        bin -> startup.bat 
      웹 브라우저에서 http://localhost:8090/ 실행했을때 
      아파치 톰켓 웹 문서가 나와야 된다. 
      실제 자기 고정IP 주소로 도 나와야 된다.
      http://192.168.131.1:8090/

   다. 다른 문서 만들어서 넣어서 보기 
       wabapps -- ROOT - first.txt 파일 만들고 내용을 넣어서 
       웹 브라우저에서  http://192.168.131.1:8090/first.txt 입력해서 
       해당 문서 확인 

       wabapps 폴더 안에 내가 직접 test폴더 만들어서 
       해당문서를 넣고 확인 하자
       http://192.168.131.1:8090/test/first.txt 

===========================================================
c:/study/jspstudy 폴더 만들고 작업공간 지정하고  
이클립스 에서 환경 설정 하기
window - preferances 
       - General - Appearance - Basic- Text Font : 글꼴, 글자 크기 조정
       - Workspace - Text file encoding - Other : UTF-8 변경
       - Web - CSS Files   \
       - Web - HTML Files  - Encoding - UTF-8 변경
       - Web - JSP Files   /
       - Server(Tomcat) => 이클립스에서 가상으로 톰켓 지정
       - Server - Runtime Environment - Add -  tomcat 지정

이클립스 화면에서 하단에  server tab 선택 - 가상 서버 추가 하면 
실제 tomcat의 정보를 복사해서 가상의 WAS(웹 어플리케이션 서버)를 만들다.

===============================================================
이 이후는 JSP 교안 보기 

==============================================================
서블릿과 JSP 차이점 

1. 서블릿 : 먼저 나왔으나 사용하기가 불편해서 MVC패턴에서 controller로만 사용하고 있다.
         -> 자바코드안에서 HTML를 사용하는 것

2. JSP : 서블릿의 불편함을 해소하기 위핸 나옴
        -> HTML안에서 자바코드를 사용하는 것           

  나중에 톰켓은 JSP를 자동으로 서블릿으로 변경해서 사용한다.

==============================================================

서블릿 먼저 학습하기 
프로젝트 만들기 - new - Dymaic Web Preject 선택 *Target runtime 확인 반드시 할 것.
이름을 프로젝트 이름과 같게 할 것.


======================================================================================================
0. Introduction

 (1) 웹브라우저는 리퀘스트 (요청) responce (응답)으로 이루어져 있다. 
 
 (2) Linux는 웹서버와 웹 어플리케이션을 따로 쓰지만, 통상 Web Application Server를 쓴다.

 (3) 지금은 어플리케이션 서버 방식을 쓴다.

 (4) 서블릿(Servlet) 클래스

     1) 자바에서 HTML을 집어 넣는 것.
     
     2) main method가 없지만, 웹 환경에 output과 input을 할 수 있다.

     3) 서블릿은 자바에서 만든다.

     4) Package 생성 -> Class가 아닌 Servlet -> 이름 정하고 -> next -> URL Mapping을 확인 및 수정
	-> next -> init, destroy, service, doGet, doPost

 (5) JSP: HTML안에 자바코드를 집어 넣는 것.  

 같은 자바인데 서블릿클래스와 JSP로 나눈 이유? 
 
 (6) 서블릿은 HTML과 달리 F5로 최신화 된것을 확인 할 수 없어서 server를 중지 했다가 다시 시작해야 된다.

 (7) html주석과 차이
 	
	<!-- html주석: 소스보기에서 내용이 보인다. -->
	<%-- jsp주석: 소스보기에서 내용이 보이지 않는다. 
		 JSP: Java Server page
		 	  HTML 안에서 자바코드를 사용할 때 사용한다. 
		 	 
	--%>                                  

1. JSP의 기본 구성

 (1) 디렉티브(지시어) : JSP 페이지에 대한 정보를 표시 / 표현방법 <%@ (지시어종류) %>
     ex) <%@ page language="java" contentType="text/html; charset=EUC-KR"pageEncoding="EUC-KR"%>     

 (3) 스크립트요소: 표현방법 <%		%> 

 (4) 표현식: 표형방법 <%=	%> 


2. 지시어(디렉티브) [jsp_2.ppt (4p)]
  
  (1) page

      	1) 현재 JSP 페이지에 대한 정보를 지정한다. JSP가 생성하는 문서의 타입, 출력 버퍼의 크기,
	   에러 페이지 등 JSP 페이지에서 필요로 하는 정보를 입력. 

	2) 톰켓이 해당 page지시어를 보고, 해당 페이지를 어떻게 해석할 지 판단하는 정보가 된다.

	3) 보통 이클립스에서 자동으로 만들어 준다.

	4) page 지시어 속성
	   
	   4-1) language: 스크립트 코드에 사용하는 언어
	  
	   4-2) contentType: 문서 타입과 캐릭터 인코딩을 지정
		- 인코딩(부호화=암호화): 정보의 형태를 변환하여 처리
		- 디코딩(복호화)       : 변환된 정보를 원래 형태로 되돌리는 것.

	   4-3) pageEncoding: 해당문서를 UTF-8 형태로 변환해서 처리 한다. 

	   4-4) session: 세션 여부 사용(기본값: true)
		* session이란? 사용자 정보를 서버측에서 저장하고 관리하는 공간, 생명주기는 웹 브라우저가 
                               종료 될 때까지 (로그인처리할 때 사용.)
		               예외) 은행 로그인 (정해진 시간이 지나면 자동으로 로그 아웃)

	   
	   4-5) buffer: 출력버퍼의 크기 지정(기본: 8kb)

	   4-6) autoFlush: 버퍼의 내용을 자동으로 출력 시켜줌(기본값: true)

	   4-7) errorPage: 오류 페이지를 지정  [Jsp03_IO_5_0.jsp]

	   4-8) iserrorPage: 해당 페이지가 오류 페이지이면 true, 기본값: false [Jsp03_IO_5_1.jsp]

		true일 경우 exception을 이용 할 수 있다.

		false일 경우 exception을 이용 할 수 없다.
  
	   4-#) 보충 : jsp_2.ppt (10 - 11p), 교재 (chapter3 55p ~ 64p)

  (2) include 

	1) JSP 페이지의 특정 영역에 다른 문서를 포함시킨다. 지정한 문서의 소스를 복사하여 현재 문제에 
	   붙여 넣는 것과 같음.

	2) Html과 비슷함.
	
  (3) taglib: JSP 페이지에서 사용할 태그 라이브러리를 지정한다.


3. 스크립트 요소 

  (1) 선언부
	
	1) 정의: 전역변수선언과 메소드 선언을 할 때 사용.

	2) 표현방법: <%! (자바코드)  %>	

  (2) 스크립트릿

	1) 순수 자바코드를 작성(실행)할 때 사용

	2) 표현방법: <% (자바코드) %>

	3) Inner Object

  (3) 표현식

	1) 변수값을 출력 할 때

	2) 표현방법: <%= (자바코드) %>

	3) 메소드 결과를 출력할 때 

	4) 나중에는 EL이나 JSTL이 대신 사용 된다. 

	5) 세미콜론(;)을 넣으면 오류가 난다.

  * 위 3요소는 겹쳐서 사용할 수 없다. 반드시 별도로 사용해야 한다. 

  (4) 내장 객체: Jsp에서 가지고 있는 Object.   



4. JSP innerObject : Jsp에서 사용할 수 있도록 지원하는 객체 [Jsp02_IO_1]

   (1) Intro

        1) servlet에서 온 것 request, response, out

	2) 나머지: page, pageContext, session, application, config, exception

	* request, response, page, pagecontext, session, application이 많이 사용 됨.

   (2) Request
	
	1) 웹프로그래밍에서 가장 많이 사용된다. 

	2) Client가 요청한 정보를 담고 있는 객체

	3) 파라미터 값을 가지고 있다.

	4) 생명주기: response를 하면 없어진다.

	5) request가 가지고 있는 정보들

	   5-1) Client의 정보 및 서버 정보를 얻을 수 있는 메소드 제공

	   5-2) html form 정보와 요청 parameter의 정보를 제공

	   5-3) 요청 헤드의 정보 제공.

	   5-4) 기본 객체 

		- request 속성을 통한 데이터(값) 저장 : request.setAttribute("이름", 데이터);

		- request 속성을 통한 저장된 데이터 호출 : request.getAttribute("이름");

		- 생명주기: response를 하기 전까지는 데이터를 가지고 있다.

	   5-5) 클라이언트의 정보 및 서버 정보를 얻을 수 있는 메소드
		
		- getRemoteAddr()			- getContentLength()

		- getCharacterEncodeing()		- getContentType()
	
		- getProtocol()				- getMethod() : 전송방식

		- getRequestURI() : 경로를 볼 때	- getContentPath() : 

		- getServerName() : 			- getServerPort : 

		 
	   5-6) html 폼과 요청 파라미터의 정보를 제공하는 메소드 *(중요)*

		- getParameter(String name) : String

		- getParameterValues(String name) : String

		- getParameterMap() : Map

		- getParameterNames() : Enumeration
 

	   5-7) 요청 헤드의 정보를 제공하는 메소드

		- getHeader(String name) : 헤더값 구하기 

		- getHeaders(Enumeration) : 헤더 목록

		- getHeaderNames(): 헤더 이름 구하기

	        - getIntHeader(String name) : 헤더값을 정수값으로 구하기

		- getDateHeader(String name) : 헤더값을 시간값으로 구하기

	   5-8) 다른 주요 메소드 *(중요)*

		- 포워딩 : request.getRequestDispatcher("이동장소").foward(request, response)

		- session 호출: request.getSession();

	
   (3) Response

	1) Intro
	   request(요청) 기본객체와 반대 기능을 수행
	   request가 요청 저오블 담고 있다면 response는 웹브라우저에 응답 정보를 담는 역할 수행

	   1-1) 헤더 정보 입력

	   1-2) 쿠키 정보 전송

	   1-3) redirect: 웹 페이지 이동
	       
		- 표현방법: response.sendRedirect("이동할 페이지");
	    
	2) 웹페이지 이동

	   2-1) Redirect
		- 표현방법: response.sendRedirect("이동할 페이지");
			    새로운 request, response을 가지고 페이지로 이동,
			    즉 기존의 parameter값들이 존재 하지 않는다.

	   2-2) forward
		- 표현방법: request.getRequestDispatcher("이동할 페이지").forward(request, response);
			    기존의 request, response을 가지고 페이지로 이동,
			    즉 기존의 parameter값들을 사용할 수 있다.

	   2-3) a 태그를 통한 페이지 이동
		- <a href="이동할 페이지"> 텍스트</a>
		- parameter값을 가지고 갈 수도 있고, 많을 수도 있다.

	   2-4) JavaScript를 통한 페이지 이동
		- location.href = "이동할 페이지"
		  (파라미터 값을 가지고 갈 수도 있고, 않을 수도 있다.)
		- history.go(숫자)

	   ** 2-1), 2-2)는 중간 웹 페이지가 보이지 않고 바로 최종 페이지가 보인다.

	   ** 2-3), 2-4)는 중간 웹 페이지에서 이벤트 처리를 해야지 다른 페이지로 이동한다.


	2) out: 브라우저에 출력하는 역할 태그를 이용해야지만 줄 변경, 띄어쓰기 가능

  (4) pageContext

	1) 정의: 하나의 JSP 페이지내에서 고유될 값을 저장한다.

	2) 해당 페이지와 일대일로 연결된 객체를 의미한다.

	3) getRequest(), getResponse(), getOut(), getPage(), getSession(), 
	   
           getServletContext(), getServletConfig(), getException()

	4) 속성을 활용한 데이터 저장과 호출

	   4-1) 저장방법: pageContext.setAttribute("이름", 데이터);  

	   4-2) 호출방법: pageContext.getAttribute("이름"); 

	   4-3) 생명주기: 해당페이지를 벗어나면 데이터도 사라진다.
  
  (5) session (로그인 할 때만 씀.)

	1) 정의: server와 client간의 접속을 유지 시켜주기 위한 객체.

	2) 속성을 활용한 데이터 저장과 호출

	   2-1) 저장방법: session.setAttribute("이름", 데이터);  

	   2-2) 호출방법: session.getAttribute("이름"); 

	   2-3) 생명주기: 일반적으로 웹브라우저가 종료되면 사라진다.

  (6) application (보안 상 문제로 잘 안 쓰임.)

	1) 정의: 모든 사용자와 관련해서 공유할 정보를 저장한다.
		 웹 어플리케이션의 설정 정보를 주로 저장한다. 

	2) 속성을 활용한 데이터 저장과 호출

	   2-1) 저장방법: application.setAttribute("이름", 데이터);  

	   2-2) 호출방법: application.getAttribute("이름"); 

	   2-3) 생명주기: 어플리케이션이 종료하면 정보도 사라짐.



5. 페이지 이동 

  (1) 속성을 활용한 데이터 저장과 호출 

	1) 우선순위 : pageContext > request > session > application

  (2) forward 방식: request, response가 기존 것을 사용.

  (3) sendRedirect 방식: request, response가 새로운 것을 사용.

  (4) 생명주기 

	1) pageContext: 해당 페이지를 벗어나면 정보가 사라짐.

	2) request: forward를 할 때는 살지만 sendRedirect를 하면 정보가 사라짐.

	* request를 제일 많이 씀.		


6. 에러처리

  (1) java에 쓰던 try ~ catch 문을 쓴다.

  (2) erroePage를 이용한다. 

  (3) exception

	1) 에러 타입 : <%= exception.getClass().getName() %></h3>

	2) 에러 메세지 : <%= exception.getMessage() %></h3>

7. 액션 태그 [Jsp04_1_0.jsp ~ Jsp04_2_3.jsp]

  (1) 액션 태그: jsp 페이지간에 흐름제어, 자비 빈즈 컴포넌트 지원

  (2) 사용법: <jsp:액션명령></액션명령>, <jsp:액션명령 />

  (3) 명령어

	1) include: 현재 페이지에서 다른 페이지 내용을 보여주는 것. [Jsp03_IO_6_0.jsp]

	   1-1) 종류

		- include 액션 : 제어권이 다른 페이지에서 가서 처리하고 결과만 가져온다.
		  <jsp:include page="가져올 페이지 이름"/>

		  <jsp:include page="가져올 페이지">
			<jsp:param value ="" name="" >
 		  </jsp:include>

		  * 웹페이지에서 한글이 깨지는 것을 방지하기 위해 해당 페이지에서 한글 처리를 해야된다.	
		    <% request.setCharacterEncoding("UTF-8"); %>
	    
	   1-2) include 지시어: 다른 페이지의 소스 전체를 가져와서 현재 페이지에서 한번에 처리		
		
		- 형식: <%@ include file="Jsp02_internalObject_2_0.jsp" %>		

		- include 지시어는 paramater 값을 전달 할 수 없다.

		- 가지고 온 페이지에서 만든 변수를 사용할 수 있다.
		

	2) forward: 페이지 이동

	3) useBean(자바빈) [Jsp03_IO_6_3.jsp]

	   3-1) JSP에서 파라미터값을 저장할 목적으로 제공하는 저장공간.

	   3-2) 자바 빈에 저장되어있는 객체를 뜻한다.

	   3-3) 사용순서

		- VO를 만든다. (변수들의 이름은 파라미터의 이름들과 같아야한다.)

		- 파라미터를 받은 페이지에서 빈 객체를 생성.
		  <jsp:useBean id = "호출이름" class="vo객체위치" scope="범위" />
		  scope: page(기본) < request < session < application

		- <jsp:setProperty> 사용하면 parameter값들이 알아서 vo객체에 들어간다.

		- <jsp:getProperty> 사용하면 parameter값들을 가져올 수 있다.
		
	    
	   3-4) 객체 만들기
  
		- 자바에서 VO vo= new VO; 
		  => <jsp:useBean id="vo" class ="com.ict.edu.VO"/> 
	    
	   3-5) 파라미터 값들이 vo와 이름 같으면 setter 호출에서 파라미터 값을 저장시킨다.
		name="vo"의 vo는 useBean id를 말한다.
		<jsp:setProperty property="*" name="vo"/>
		

8. 쿠키 [Jsp05_1_0.jsp]

  (1) Intro

	1) 쿠키란? 웹 브라우저(클라이언트)가 정보를 보관하는 저장소를 말한다. 
	     
  	2) 웹 브라우저와의 관계: 웹 서버에서 정보를 요청할 때 쿠키와 함께 전송한다.

	3) 웹 서버와의 관계 

	   3-1) 웹 브라우저가 전송한 쿠키를 사용해서 필요한 데이터를 읽을 수 있다.

	   3-2) 쿠키로 웹 브라우저에게 정보를 전송할 수 있다.

	4) 쿠키는 웹서버와 웹 브라우저 양쪽에 생성 할 수 있는데 JSP에서 생성하는 쿠키는 
	   웹 서버에서 생성하는 쿠키이다. 하나의 브라우저에서는 여러개의 쿠키를 가질 수 있다.

  (2) 주요 메소드 	

	1) setDomain(String pattern) : 이 쿠키가 전송될 서버의 도메인을 지정한다.

	2) getDomain(): 쿠키의 도메인을 구한다.

	3) setPath(): 쿠키의 전송 경로를 지정한다. 

	4) getPath(): 쿠키의 전송 경로를 구한다. 

	5) getName(): 쿠키의 이름을 호출
	
	6) getValue(): 쿠키의 값을 호출 
	     
	7) setMaxAge(int): 쿠키의 유효시간을 초단위로 지정할 수 있다.

  (3) 쿠키 생성

  




  

 