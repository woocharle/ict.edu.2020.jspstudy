/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.36
 * Generated at: 2020-07-03 02:53:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Map;
import java.util.Enumeration;

public final class Jsp02_005finternalObject_005f1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("java.util.Map");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 요청에 따른 한글 처리
	request.setCharacterEncoding("UTF-8");
	// 파라미터 내려받기
	String name = request.getParameter("name");
	String age = request.getParameter("age");
	String addr = request.getParameter("addr");
	String gender = request.getParameter("gender");
	String[] hobby = request.getParameterValues("hobby");
	String rsd = request.getParameter("residence");
	String[] animal = request.getParameterValues("animal");
	String cPage = request.getParameter("cPage");

      out.write(" \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t\t<title>JSP 내장객체</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<h1> 1. Request: 클라이언트 및 서버 정보 보기 </h1>\r\n");
      out.write("\t\t<h3>\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t<li> 클라이언트 IP\t\t\t: ");
      out.print(request.getRemoteAddr() );
      out.write(" </li>\r\n");
      out.write("\t\t\t\t<li> 요청 정보 길이\t\t\t: ");
      out.print(request.getContentLength() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 요청 정보 인코딩\t\t: ");
      out.print(request.getCharacterEncoding() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 요청 정보 컨텐츠 타입\t: ");
      out.print(request.getContentType() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 요청 정보 프로토콜\t\t: ");
      out.print(request.getProtocol() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 요청 정보 전송 방식\t: ");
      out.print(request.getMethod() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 요청 URI\t\t\t\t: ");
      out.print(request.getRequestURI() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 컨텍스트 경로\t\t\t: ");
      out.print(request.getContextPath() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 컨텍스트 정보\t\t\t: ");
      out.print(request.getServletContext() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 서버 이름\t\t\t\t: ");
      out.print(request.getServerName() );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li> 서버 포트\t\t\t\t: ");
      out.print(request.getServerPort() );
      out.write("</li>\t\t\t\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t</h3>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h1> 2. 파라미터 값 표시하기 </h1>\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t<li>이름: ");
      out.print(name );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li>나이: ");
      out.print(age );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li>주소: ");
      out.print(addr );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li>성별: ");
      out.print(gender );
      out.write("</li>\r\n");
      out.write("\t\t\t\t<li>취미: ");
 for(String  k : hobby){
								out.print(k + "&nbsp;&nbsp;");
						  }
      out.write("   \t\t\r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t<li>반려동물: ");
 for(String  k : animal){
								out.print(k + "&nbsp;&nbsp;");
						  	  }
      out.write("  \r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t<li> cPage : ");
      out.print(cPage );
      out.write("</li>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2> * getParameterNames(): 파라미터 이름들 구하기 * </h2>\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t");

					Enumeration p_enum = request.getParameterNames();
					while(p_enum.hasMoreElements()){
						String p_name = (String)p_enum.nextElement();
						out.println("<li>" + p_name + "</li>");
					}
				
				
      out.write("\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t<h2> * getParameterMap(): 파라미터 구하기 * </h2>\r\n");
      out.write("\t\t\t<h3>\r\n");
      out.write("\t\t\t\t");

					Map map = request.getParameterMap();
					map.get("name");
					String[] m_name = (String[])map.get("name");
					String[] m_age = (String[])map.get("age");
					String[] m_hobby = (String[])map.get("hobby");
					out.println(m_name[0] + "<br>");
					out.println(m_age[0] + "<br>");
					for(String k : m_hobby){
						out.println(k + "&nbsp;&nbsp;");
					}
				
      out.write("\r\n");
      out.write("\t\t\t</h3>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<h2> * request로 HTTP 헤더 정보 보기</h2>\r\n");
      out.write("\t\t<h3>\r\n");
      out.write("\t\t\t");

				Enumeration e_num = request.getHeaderNames();
				while(e_num.hasMoreElements()){
					String h_name=(String) e_num.nextElement();
					String h_value= request.getHeader(h_name);
					out.println(h_name+ ":" + h_value + "<br>");
				}
			
			
      out.write("\r\n");
      out.write("\t\t</h3>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t</body>\r\n");
      out.write("\t\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
